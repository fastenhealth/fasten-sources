// Copyright (C) Fasten Health, Inc. - All Rights Reserved.
//
// THIS FILE IS GENERATED BY https://github.com/fastenhealth/fasten-sources-gen
// PLEASE DO NOT EDIT BY HAND

package definitions

import (
	"fmt"
	"github.com/fastenhealth/fasten-sources/catalog"
	"github.com/fastenhealth/fasten-sources/definitions/internal/platform"
	models "github.com/fastenhealth/fasten-sources/definitions/models"
	pkg "github.com/fastenhealth/fasten-sources/pkg"
	modelsCatalog "github.com/fastenhealth/fasten-sources/pkg/models/catalog"
)

type GetSourceConfigOptions struct {
	PlatformType pkg.SourceType

	BrandId    string
	PortalId   string
	EndpointId string
}

func GetSourceConfig(env pkg.FastenLighthouseEnvType, clientIdLookup map[pkg.SourceType]string, options GetSourceConfigOptions) (models.LighthouseSourceDefinition, error) {

	if len(options.PlatformType) > 0 {
		if options.PlatformType == pkg.SourceTypeManual {
			return models.LighthouseSourceDefinition{PlatformType: pkg.SourceTypeManual}, nil
		} else if options.PlatformType == pkg.SourceTypeFasten {
			return models.LighthouseSourceDefinition{PlatformType: pkg.SourceTypeFasten}, nil
		} else {
			return models.LighthouseSourceDefinition{}, fmt.Errorf("unsupported platform type: %s", options.PlatformType)
		}
	} else if len(options.EndpointId) > 0 {
		endpointLookup, err := catalog.GetEndpoints(&modelsCatalog.CatalogQueryOptions{Id: options.EndpointId, LighthouseEnvType: env})
		if err != nil {
			return models.LighthouseSourceDefinition{}, fmt.Errorf("error retrieving endpoint (%s): %w", options.EndpointId, err)
		}

		if len(endpointLookup) > 0 {
			return models.LighthouseSourceDefinition{}, fmt.Errorf("error unexpected endpoint lookup length (%d): %w", len(endpointLookup), err)
		}
		endpoint := endpointLookup[options.EndpointId]

		//this is the platform that we need to use as the base class.
		platformType := endpoint.GetPlatformType()

		platformDefinition, err := GetPlatformDefinition(platformType, env, clientIdLookup)
		if err != nil {
			return models.LighthouseSourceDefinition{}, fmt.Errorf("error retrieving platform definition (%s): %w", platformType, err)
		}
		//TODO: merge endpoint data into platform definition

		return platformDefinition, err
	} else {
		return models.LighthouseSourceDefinition{}, fmt.Errorf("PlatformType or EndpointID are required")
	}

}

func GetPlatformDefinition(platformType pkg.SourceType, env pkg.FastenLighthouseEnvType, clientIdLookup map[pkg.SourceType]string) (models.LighthouseSourceDefinition, error) {
	switch platformType {
	// platform
	case pkg.SourceTypeAdvancedmd:
		return platform.GetSourceAdvancedmd(env, clientIdLookup)
	case pkg.SourceTypeAetna:
		return platform.GetSourceAetna(env, clientIdLookup)
	case pkg.SourceTypeAllscripts:
		return platform.GetSourceAllscripts(env, clientIdLookup)
	case pkg.SourceTypeAthena:
		return platform.GetSourceAthena(env, clientIdLookup)
	case pkg.SourceTypeCareevolution:
		return platform.GetSourceCareevolution(env, clientIdLookup)
	case pkg.SourceTypeCerner:
		return platform.GetSourceCerner(env, clientIdLookup)
	case pkg.SourceTypeCigna:
		return platform.GetSourceCigna(env, clientIdLookup)
	case pkg.SourceTypeEclinicalworks:
		return platform.GetSourceEclinicalworks(env, clientIdLookup)
	case pkg.SourceTypeEdifecs:
		return platform.GetSourceEdifecs(env, clientIdLookup)
	case pkg.SourceTypeEpicLegacy:
		return platform.GetSourceEpicLegacy(env, clientIdLookup)
	case pkg.SourceTypeEpic:
		return platform.GetSourceEpic(env, clientIdLookup)
	case pkg.SourceTypeMeditech:
		return platform.GetSourceMeditech(env, clientIdLookup)
	case pkg.SourceTypeNextgen:
		return platform.GetSourceNextgen(env, clientIdLookup)
	case pkg.SourceTypeVahealth:
		return platform.GetSourceVahealth(env, clientIdLookup)
	case pkg.SourceTypeBcbsal:
		return platform.GetSourceBcbsal(env, clientIdLookup)
	case pkg.SourceTypeHumana:
		return platform.GetSourceHumana(env, clientIdLookup)
	case pkg.SourceTypeMedicare:
		return platform.GetSourceMedicare(env, clientIdLookup)
	case pkg.SourceTypeUnitedhealthcare:
		return platform.GetSourceUnitedhealthcare(env, clientIdLookup)
	default:
		return models.LighthouseSourceDefinition{}, fmt.Errorf("unsupported platform type: %s", platformType)
	}
}
