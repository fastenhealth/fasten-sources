// Copyright (C) Fasten Health, Inc. - All Rights Reserved.
//
// THIS FILE IS GENERATED BY https://github.com/fastenhealth/fasten-sources-gen
// PLEASE DO NOT EDIT BY HAND

package source

import (
	platform "github.com/fastenhealth/fasten-sources/definitions/internal/platform"
	models "github.com/fastenhealth/fasten-sources/definitions/models"
	pkg "github.com/fastenhealth/fasten-sources/pkg"
)

// https://fhir.nextgen.com/nge/prod/fhir-api-r4/fhir/r4/metadata
func GetSourceCompletecareHealthNetwork(env pkg.FastenLighthouseEnvType, clientIdLookup map[pkg.SourceType]string) (models.LighthouseSourceDefinition, error) {
	sourceDef, err := platform.GetSourceNextgen(env, clientIdLookup)
	sourceDef.AuthorizationEndpoint = "https://fhir.nextgen.com/nge/prod/patient-oauth/authorize"
	sourceDef.TokenEndpoint = "https://fhir.nextgen.com/nge/prod/patient-oauth/token"

	sourceDef.Audience = "https://fhir.nextgen.com/nge/prod/fhir-api-r4/fhir/r4"

	sourceDef.ApiEndpointBaseUrl = "https://fhir.nextgen.com/nge/prod/fhir-api-r4/fhir/r4"
	// retrieve client-id, if available
	if clientId, clientIdOk := clientIdLookup[pkg.SourceTypeCompletecareHealthNetwork]; clientIdOk {
		sourceDef.ClientId = clientId
	}
	sourceDef.RedirectUri = pkg.GetCallbackEndpoint(string(pkg.SourceTypeNextgen))

	sourceDef.Display = "CompleteCare Health Network"
	sourceDef.SourceType = pkg.SourceTypeCompletecareHealthNetwork
	sourceDef.Category = []string{"101YM0800X", "1223G0001X", "152W00000X", "164W00000X", "176B00000X", "207Q00000X", "207R00000X", "207RI0200X", "207V00000X", "207VE0102X", "207VX0000X", "208000000X", "208D00000X", "213E00000X", "261QD0000X", "261QF0400X"}
	sourceDef.Aliases = []string{"COMPLETECARE HEALTH NETWORK"}
	sourceDef.Identifiers = map[string][]string{"http://hl7.org/fhir/sid/us-npi": []string{"1063715332", "1154592459", "1215242516", "1316307432", "1346342441", "1417309527", "1689785610", "1700816816", "1720198740", "1730527805"}}
	sourceDef.PatientAccessUrl = "https://completecarenj.org/"
	sourceDef.SecretKeyPrefix = "nextgen"

	return sourceDef, err
}
