// Copyright (C) Fasten Health, Inc. - All Rights Reserved.
//
// THIS FILE IS GENERATED BY https://github.com/fastenhealth/fasten-sources-gen
// PLEASE DO NOT EDIT BY HAND

package platform

import (
	models "github.com/fastenhealth/fasten-sources/definitions/models"
	pkg "github.com/fastenhealth/fasten-sources/pkg"
)

// https://sandbox.fhir.flex.optum.com/R4/.well-known/smart-configuration
// https://sandbox.fhir.flex.optum.com/R4/metadata
// https://www.uhc.com/legal/interoperability-apis
func GetSourceUnitedhealthcareSandbox(env pkg.FastenLighthouseEnvType, clientIdLookup map[pkg.SourceType]string) (models.LighthouseSourceDefinition, error) {
	sourceDef := models.LighthouseSourceDefinition{}
	sourceDef.AuthorizationEndpoint = "https://sandbox.authz.flex.optum.com/oauth/authorize"
	sourceDef.TokenEndpoint = "https://sandbox.authz.flex.optum.com/oauth/token"
	sourceDef.IntrospectionEndpoint = "https://sandbox.authz.flex.optum.com/.well-known/jwks.json"
	sourceDef.UserInfoEndpoint = "https://sandbox.authz.flex.optum.com/userinfo"

	sourceDef.Issuer = "https://sandbox.fhir.flex.optum.com/R4"
	sourceDef.Scopes = []string{"fhirUser", "openid", "patient/Condition.read", "patient/Coverage.read", "patient/Encounter.read", "patient/ExplanationOfBenefit.read", "patient/Immunization.read", "patient/MedicationDispense.read", "patient/MedicationRequest.read", "patient/Observation.read", "patient/Patient.read", "patient/Procedure.read", "profile"}
	sourceDef.GrantTypesSupported = []string{"authorization_code"}
	sourceDef.ResponseType = []string{"code"}
	sourceDef.ResponseModesSupported = []string{"fragment", "query"}
	sourceDef.Audience = "https://sandbox.fhir.flex.optum.com/R4"
	sourceDef.CodeChallengeMethodsSupported = []string{"S256"}

	sourceDef.ApiEndpointBaseUrl = "https://sandbox.fhir.flex.optum.com/R4"
	// retrieve client-id, if available
	if clientId, clientIdOk := clientIdLookup[pkg.SourceTypeUnitedhealthcareSandbox]; clientIdOk {
		sourceDef.ClientId = clientId
	}
	sourceDef.RedirectUri = pkg.GetCallbackEndpoint(string(pkg.SourceTypeUnitedhealthcareSandbox))

	sourceDef.Display = "United Healthcare (Sandbox)"
	sourceDef.PlatformType = pkg.SourceTypeUnitedhealthcareSandbox
	sourceDef.SourceType = pkg.SourceTypeUnitedhealthcareSandbox
	sourceDef.Category = []string{"Insurance"}
	sourceDef.Aliases = []string{}
	sourceDef.PatientAccessUrl = "https://www.uhc.com"

	return sourceDef, nil
}
