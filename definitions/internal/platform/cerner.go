// Copyright (C) Fasten Health, Inc. - All Rights Reserved.
//
// THIS FILE IS GENERATED BY https://github.com/fastenhealth/fasten-sources-gen
// PLEASE DO NOT EDIT BY HAND

package platform

import (
	models "github.com/fastenhealth/fasten-sources/definitions/models"
	pkg "github.com/fastenhealth/fasten-sources/pkg"
)

/*
https://groups.google.com/g/cerner-fhir-developers
http://fhir.cerner.com/millennium/r4/#authorization
*/
// https://fhir-ehr.cerner.com/r4/ec2458f2-1e24-41c8-b71b-0e701af7583d/.well-known/smart-configuration
// https://fhir-myrecord.cerner.com/r4/ec2458f2-1e24-41c8-b71b-0e701af7583d/metadata
// https://docs.google.com/document/d/10RnVyF1etl_17pyCyK96tyhUWRbrTyEcqpwzW-Z-Ybs/edit
func GetSourceCerner(env pkg.FastenLighthouseEnvType, clientIdLookup map[pkg.SourceType]string) (models.LighthouseSourceDefinition, error) {
	sourceDef := models.LighthouseSourceDefinition{}
	sourceDef.AuthorizationEndpoint = "https://authorization.cerner.com/tenants/ec2458f2-1e24-41c8-b71b-0e701af7583d/protocols/oauth2/profiles/smart-v1/personas/patient/authorize"
	sourceDef.TokenEndpoint = "https://authorization.cerner.com/tenants/ec2458f2-1e24-41c8-b71b-0e701af7583d/protocols/oauth2/profiles/smart-v1/token"
	sourceDef.IntrospectionEndpoint = "https://authorization.cerner.com/tokeninfo"

	sourceDef.Issuer = "https://authorization.cerner.com"
	sourceDef.Scopes = []string{"fhirUser", "offline_access", "openid", "patient/Account.read", "patient/AllergyIntolerance.read", "patient/Appointment.read", "patient/Binary.read", "patient/CarePlan.read", "patient/CareTeam.read", "patient/ChargeItem.read", "patient/Communication.read", "patient/Condition.read", "patient/Consent.read", "patient/Coverage.read", "patient/Device.read", "patient/DiagnosticReport.read", "patient/DocumentReference.read", "patient/Encounter.read", "patient/FamilyMemberHistory.read", "patient/Goal.read", "patient/Immunization.read", "patient/InsurancePlan.read", "patient/MedicationAdministration.read", "patient/MedicationRequest.read", "patient/NutritionOrder.read", "patient/Observation.read", "patient/Patient.read", "patient/Person.read", "patient/Procedure.read", "patient/Provenance.read", "patient/Questionnaire.read", "patient/QuestionnaireResponse.read", "patient/RelatedPerson.read", "patient/Schedule.read", "patient/ServiceRequest.read", "patient/Slot.read", "user/Location.read", "user/Organization.read", "user/Practitioner.read"}
	sourceDef.GrantTypesSupported = []string{"authorization_code"}
	sourceDef.ResponseType = []string{"code"}
	sourceDef.ResponseModesSupported = []string{"fragment", "query"}
	sourceDef.Audience = "https://fhir-myrecord.cerner.com/r4/ec2458f2-1e24-41c8-b71b-0e701af7583d"
	sourceDef.CodeChallengeMethodsSupported = []string{"S256"}

	sourceDef.ApiEndpointBaseUrl = "https://fhir-myrecord.cerner.com/r4/ec2458f2-1e24-41c8-b71b-0e701af7583d"
	// retrieve client-id, if available
	if clientId, clientIdOk := clientIdLookup[pkg.SourceTypeCerner]; clientIdOk {
		sourceDef.ClientId = clientId
	}
	sourceDef.RedirectUri = pkg.GetCallbackEndpoint(string(pkg.SourceTypeCerner))

	sourceDef.Display = "Cerner (Sandbox)"
	sourceDef.PlatformType = pkg.SourceTypeCerner
	sourceDef.SourceType = pkg.SourceTypeCerner
	sourceDef.Category = []string{"261QC1800X", "261Q00000X", "333600000X", "363AM0700X"}
	sourceDef.Aliases = []string{"CERNER HEALTH CONNECTIONS, INC"}
	sourceDef.Identifiers = map[string][]string{"http://hl7.org/fhir/sid/us-npi": []string{"1700190840", "1659860716", "1922697838", "1689269136", "1841868205", "1376161828", "1225690118", "1063171486", "1437780327", "1962028969", "1396376471", "1922676386", "1346915600", "1922507763", "1003518598", "1285336776", "1366950420", "1093328148", "1336586874", "1942718440", "1790444115", "1053909168", "1558939918", "1013585470", "1285197699", "1932723806", "1417450651", "1033629761", "1912672270", "1639555048", "1629511258", "1245999663", "1790444974", "1013479716", "1942969365", "1760820716", "1851050272", "1598141798", "1871252296"}}
	sourceDef.PatientAccessUrl = "www.cerner.com"

	return sourceDef, nil
}
