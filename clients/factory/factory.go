// Copyright (C) Fasten Health, Inc. - All Rights Reserved.
//
// THIS FILE IS GENERATED BY https://github.com/fastenhealth/fasten-sources-gen
// PLEASE DO NOT EDIT BY HAND

package factory

import (
	"context"
	"github.com/fastenhealth/fasten-sources/clients/internal"
	fasten "github.com/fastenhealth/fasten-sources/clients/internal/fasten"
	manual "github.com/fastenhealth/fasten-sources/clients/internal/manual"
	"github.com/fastenhealth/fasten-sources/clients/internal/tefca_direct"
	"github.com/fastenhealth/fasten-sources/clients/internal/tefca_facilitated"
	models "github.com/fastenhealth/fasten-sources/clients/models"
	definitionsModels "github.com/fastenhealth/fasten-sources/definitions/models"
	pkg "github.com/fastenhealth/fasten-sources/pkg"
	logrus "github.com/sirupsen/logrus"
)

func GetSourceClient(
	env pkg.FastenLighthouseEnvType,
	ctx context.Context,
	globalLogger logrus.FieldLogger,
	sourceCreds models.SourceCredential,
	clientOptions ...func(options *models.SourceClientOptions),
) (models.SourceClient, error) {

	switch sourceCreds.GetPlatformType() {
	case pkg.PlatformTypeManual:
		return manual.GetSourceClientManual(env, ctx, globalLogger, sourceCreds, clientOptions...)
	case pkg.PlatformTypeFasten:
		return fasten.GetSourceClientFasten(env, ctx, globalLogger, sourceCreds, clientOptions...)
	case pkg.PlatformTypeTEFCA:
		return tefca_direct.GetSourceClientTefca(env, ctx, globalLogger, sourceCreds, clientOptions...)
	case pkg.PlatformTypeTEFCAEpic:
		globalLogger.Warnf("TEFCA Facilitated FHIR with platform type: %s", pkg.PlatformTypeTEFCAEpic)
		return tefca_facilitated.GetSourceClientTefcaFacilitated(env, ctx, globalLogger, sourceCreds, clientOptions...)
	default:
		return internal.GetDynamicSourceClient(env, ctx, globalLogger, sourceCreds, clientOptions...)
	}
}

func GetSourceClientWithDefinition(
	env pkg.FastenLighthouseEnvType,
	ctx context.Context,
	globalLogger logrus.FieldLogger,
	sourceCreds models.SourceCredential,
	endpointDefinition *definitionsModels.LighthouseSourceDefinition,
	clientOptions ...func(options *models.SourceClientOptions),
) (models.SourceClient, error) {
	return internal.GetDynamicSourceClientWithDefinition(env, ctx, globalLogger, sourceCreds, endpointDefinition, clientOptions...)
}
