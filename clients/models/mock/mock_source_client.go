// Code generated by MockGen. DO NOT EDIT.
// Source: source_client.go

// Package mock_models is a generated GoMock package.
package mock_models

import (
	os "os"
	reflect "reflect"

	models "github.com/fastenhealth/fasten-sources/clients/models"
	gomock "github.com/golang/mock/gomock"
)

// MockSourceClient is a mock of SourceClient interface.
type MockSourceClient struct {
	ctrl     *gomock.Controller
	recorder *MockSourceClientMockRecorder
}

// MockSourceClientMockRecorder is the mock recorder for MockSourceClient.
type MockSourceClientMockRecorder struct {
	mock *MockSourceClient
}

// NewMockSourceClient creates a new mock instance.
func NewMockSourceClient(ctrl *gomock.Controller) *MockSourceClient {
	mock := &MockSourceClient{ctrl: ctrl}
	mock.recorder = &MockSourceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSourceClient) EXPECT() *MockSourceClientMockRecorder {
	return m.recorder
}

// GetRequest mocks base method.
func (m *MockSourceClient) GetRequest(resourceSubpath string, decodeModelPtr interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequest", resourceSubpath, decodeModelPtr)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetRequest indicates an expected call of GetRequest.
func (mr *MockSourceClientMockRecorder) GetRequest(resourceSubpath, decodeModelPtr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequest", reflect.TypeOf((*MockSourceClient)(nil).GetRequest), resourceSubpath, decodeModelPtr)
}

// SyncAll mocks base method.
func (m *MockSourceClient) SyncAll(db models.DatabaseRepository) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncAll", db)
	ret0, _ := ret[0].(error)
	return ret0
}

// SyncAll indicates an expected call of SyncAll.
func (mr *MockSourceClientMockRecorder) SyncAll(db interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncAll", reflect.TypeOf((*MockSourceClient)(nil).SyncAll), db)
}

// SyncAllBundle mocks base method.
func (m *MockSourceClient) SyncAllBundle(db models.DatabaseRepository, bundleFile *os.File) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncAllBundle", db, bundleFile)
	ret0, _ := ret[0].(error)
	return ret0
}

// SyncAllBundle indicates an expected call of SyncAllBundle.
func (mr *MockSourceClientMockRecorder) SyncAllBundle(db, bundleFile interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncAllBundle", reflect.TypeOf((*MockSourceClient)(nil).SyncAllBundle), db, bundleFile)
}
