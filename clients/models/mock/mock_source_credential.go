// Code generated by MockGen. DO NOT EDIT.
// Source: source_credential.go

// Package mock_models is a generated GoMock package.
package mock_models

import (
	reflect "reflect"

	pkg "github.com/fastenhealth/fasten-sources/pkg"
	gomock "github.com/golang/mock/gomock"
)

// MockSourceCredential is a mock of SourceCredential interface.
type MockSourceCredential struct {
	ctrl     *gomock.Controller
	recorder *MockSourceCredentialMockRecorder
}

// MockSourceCredentialMockRecorder is the mock recorder for MockSourceCredential.
type MockSourceCredentialMockRecorder struct {
	mock *MockSourceCredential
}

// NewMockSourceCredential creates a new mock instance.
func NewMockSourceCredential(ctrl *gomock.Controller) *MockSourceCredential {
	mock := &MockSourceCredential{ctrl: ctrl}
	mock.recorder = &MockSourceCredentialMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSourceCredential) EXPECT() *MockSourceCredentialMockRecorder {
	return m.recorder
}

// GetAccessToken mocks base method.
func (m *MockSourceCredential) GetAccessToken() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccessToken")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetAccessToken indicates an expected call of GetAccessToken.
func (mr *MockSourceCredentialMockRecorder) GetAccessToken() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessToken", reflect.TypeOf((*MockSourceCredential)(nil).GetAccessToken))
}

// GetBrandId mocks base method.
func (m *MockSourceCredential) GetBrandId() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBrandId")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetBrandId indicates an expected call of GetBrandId.
func (mr *MockSourceCredentialMockRecorder) GetBrandId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBrandId", reflect.TypeOf((*MockSourceCredential)(nil).GetBrandId))
}

// GetClientId mocks base method.
func (m *MockSourceCredential) GetClientId() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientId")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetClientId indicates an expected call of GetClientId.
func (mr *MockSourceCredentialMockRecorder) GetClientId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientId", reflect.TypeOf((*MockSourceCredential)(nil).GetClientId))
}

// GetEndpointId mocks base method.
func (m *MockSourceCredential) GetEndpointId() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEndpointId")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetEndpointId indicates an expected call of GetEndpointId.
func (mr *MockSourceCredentialMockRecorder) GetEndpointId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEndpointId", reflect.TypeOf((*MockSourceCredential)(nil).GetEndpointId))
}

// GetExpiresAt mocks base method.
func (m *MockSourceCredential) GetExpiresAt() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExpiresAt")
	ret0, _ := ret[0].(int64)
	return ret0
}

// GetExpiresAt indicates an expected call of GetExpiresAt.
func (mr *MockSourceCredentialMockRecorder) GetExpiresAt() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExpiresAt", reflect.TypeOf((*MockSourceCredential)(nil).GetExpiresAt))
}

// GetPatientId mocks base method.
func (m *MockSourceCredential) GetPatientId() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPatientId")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetPatientId indicates an expected call of GetPatientId.
func (mr *MockSourceCredentialMockRecorder) GetPatientId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPatientId", reflect.TypeOf((*MockSourceCredential)(nil).GetPatientId))
}

// GetPlatformType mocks base method.
func (m *MockSourceCredential) GetPlatformType() pkg.PlatformType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlatformType")
	ret0, _ := ret[0].(pkg.PlatformType)
	return ret0
}

// GetPlatformType indicates an expected call of GetPlatformType.
func (mr *MockSourceCredentialMockRecorder) GetPlatformType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlatformType", reflect.TypeOf((*MockSourceCredential)(nil).GetPlatformType))
}

// GetPortalId mocks base method.
func (m *MockSourceCredential) GetPortalId() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPortalId")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetPortalId indicates an expected call of GetPortalId.
func (mr *MockSourceCredentialMockRecorder) GetPortalId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPortalId", reflect.TypeOf((*MockSourceCredential)(nil).GetPortalId))
}

// GetRefreshToken mocks base method.
func (m *MockSourceCredential) GetRefreshToken() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRefreshToken")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetRefreshToken indicates an expected call of GetRefreshToken.
func (mr *MockSourceCredentialMockRecorder) GetRefreshToken() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRefreshToken", reflect.TypeOf((*MockSourceCredential)(nil).GetRefreshToken))
}

// GetSourceCredentialType mocks base method.
func (m *MockSourceCredential) GetSourceCredentialType() pkg.SourceCredentialType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSourceCredentialType")
	ret0, _ := ret[0].(pkg.SourceCredentialType)
	return ret0
}

// GetSourceCredentialType indicates an expected call of GetSourceCredentialType.
func (mr *MockSourceCredentialMockRecorder) GetSourceCredentialType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSourceCredentialType", reflect.TypeOf((*MockSourceCredential)(nil).GetSourceCredentialType))
}

// GetSourceId mocks base method.
func (m *MockSourceCredential) GetSourceId() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSourceId")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetSourceId indicates an expected call of GetSourceId.
func (mr *MockSourceCredentialMockRecorder) GetSourceId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSourceId", reflect.TypeOf((*MockSourceCredential)(nil).GetSourceId))
}

// SetTokens mocks base method.
func (m *MockSourceCredential) SetTokens(accessToken, refreshTokens string, expiresAt int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTokens", accessToken, refreshTokens, expiresAt)
}

// SetTokens indicates an expected call of SetTokens.
func (mr *MockSourceCredentialMockRecorder) SetTokens(accessToken, refreshTokens, expiresAt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTokens", reflect.TypeOf((*MockSourceCredential)(nil).SetTokens), accessToken, refreshTokens, expiresAt)
}
